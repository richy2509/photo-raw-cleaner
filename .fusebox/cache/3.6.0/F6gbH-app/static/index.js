module.exports = { contents: "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n///<reference path=\"Options.ts\"/>\nconst fs = require(\"fs-extra\");\nconst Options_1 = require(\"Options\");\nconst Logger = require(\"LogUtils\");\nconst PathUtils_1 = require(\"PathUtils\");\nconst StringUtils_1 = require(\"StringUtils\");\nglobal.__DEBUG_LEVEL_DEEPEST = 1;\nglobal.__DEBUG_LEVEL_MIN = 0;\nconst config = {\n    folders: {\n        generated: p => `${p}/generated`,\n        removal: p => `${p}/generated/to_remove`\n    }\n};\nconst params = {\n    destination: { position: 1, name: \"target\", defaultValue: \"./images\", format: PathUtils_1.formatPath },\n    photoExtension: { position: 2, name: \"extension\", defaultValue: \"jpg\", format: PathUtils_1.formatExtension, extName: PathUtils_1.extractExtensionName },\n    rawFormat: { position: 3, name: \"raw\", defaultValue: \"nef\", format: PathUtils_1.formatExtension, extName: PathUtils_1.extractExtensionName },\n    debug: { position: 4, name: \"debug\", defaultValue: 2 }\n};\nparams.destination.value = params.destination.format(Options_1.extractParameter(process.argv, params.destination));\nparams.photoExtension.value = params.photoExtension.format(Options_1.extractParameter(process.argv, params.photoExtension));\nparams.rawFormat.value = params.rawFormat.format(Options_1.extractParameter(process.argv, params.rawFormat));\nparams.debug.value = Options_1.extractParameter(process.argv, params.debug);\nglobal.__debugLevel = params.debug.value;\nlet path = params.destination.value;\n//Logger.logDeepest(\"Parameters:\", params);\nconsole.log(`Debug level selected is : ${params.debug.value}`);\nif (!fs.existsSync(path)) {\n    Logger.logMinimum(`Unable to find directory : ${path}`);\n    process.exit(1);\n}\nelse {\n    Logger.logDeepest(`main ==> The folder ${path} exists`);\n}\nLogger.logMinimum(`main ==> Folder to analyse : ${path}`);\nPathUtils_1.createDirIfNot(config.folders.generated(path));\nPathUtils_1.createDirIfNot(config.folders.generated(path) + \"/\" + params.photoExtension.extName(params.photoExtension.value));\nPathUtils_1.createDirIfNot(config.folders.removal(path));\nif (params.debug.value >= __DEBUG_LEVEL_DEEPEST) {\n    console.log(`main ==> begin reading ${path}`);\n    fs.readdirSync(path).forEach(p => {\n        console.log(`main [Â ${path} ] ==> ${p}`);\n    });\n    fs.readdirSync(path)\n        .filter((f) => StringUtils_1.endsWithAnyCase(f, params.photoExtension.value))\n        .filter((f) => !fs.existsSync(`${path}/${PathUtils_1.replaceExtension(f, params.photoExtension.value, params.rawFormat.value)}`))\n        .forEach((f) => {\n        Logger.logMinimum(`main ==> moving file ${f} to removing folder : ${config.folders.removal(path)}`);\n        fs.moveSync(`${path}/${f}`, `${config.folders.removal(path)}/${f}`);\n    });\n    console.log(`main ==> end reading ${path}`);\n}\nfs.readdirSync(path)\n    .filter((f) => StringUtils_1.endsWithAnyCase(f, params.photoExtension.value))\n    .filter(f => fs.existsSync(`${path}/${PathUtils_1.replaceExtension(f, params.photoExtension.value, params.rawFormat.value)}`))\n    .forEach(f => {\n    Logger.logMinimum(`main ==> Check if file already exists in the following folder`);\n    Logger.logMinimum(`main ==> moving file ${f} to keeping folder : ${config.folders.generated(path)}/${params.photoExtension.extName(params.photoExtension.value)}`);\n    fs.moveSync(`${path}/${f}`, `${config.folders.generated(path)}/${params.photoExtension.extName(params.photoExtension.value)}/${f}`);\n});\n",
dependencies: ["fs-extra","Options","LogUtils","PathUtils","StringUtils","process"],
sourceMap: {},
headerContent: ["/* fuse:injection: */ var process = require(\"process\");"],
mtime: 1541764287863,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
